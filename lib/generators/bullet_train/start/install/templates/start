#!/usr/bin/env ruby

require "active_support"

if system("require colorize").blank?
  system("gem install colorize")
end

require "colorize"

def we_will_start_it(command)
  puts "`#{command}` isn't running. We'll start it.".green
end

PREREQUISITE = {
  'puma' => 'bundle install && mkdir tmp/pids'
}

ALTERNATIVE = {
  'puma' => 'rails s'
}

# In certain cases we need to check for multiple strings to ensure we don't match things like `puma` with `puma-dev`.
PROCESSES = {
  'puma' => ['puma', 'tcp']
}

procfile_lines = `cat ./Procfile`.lines

procfile_lines.each_with_index do |line, index|
  # Grab the left hand and the right hand of every line in `Procfile`.
  _, command = line.split(": ").map(&:strip)

  # Remove `bundle exec` from every command when we're referencing it by name.
  simple_command = command.split('-').first.gsub('bundle exec', '').strip

  # Check whether that command is running.
  is_not_running = `ps aux | #{(PROCESSES[simple_command] || [simple_command]).map { |process| "grep '#{process}'" }.join(" | ")} | grep -v "grep"`.lines.empty?

  if is_not_running
    we_will_start_it(simple_command)

    # Check whether there is something we should run before a given command.
    if PREREQUISITE[simple_command].present?
      puts "Before we run `#{simple_command}`, we're going to run `#{PREREQUISITE[simple_command]}`.".green
      puts `#{PREREQUISITE[simple_command]}`
    end

    if ALTERNATIVE[simple_command].present?
      puts "Instead of `#{command}`, we're just going to run `#{ALTERNATIVE[simple_command]}`.".green
      command = ALTERNATIVE[simple_command]
    else
      puts "Now we're going to run `#{command}`".green
    end

    if (procfile_lines.length - 1) != index
      puts "However, there's more to run, so be sure to open another tab and run `bin/start` again!".yellow
    end

    exec command
  end
end

puts "We don't have anything else left to run!".green
